# Stage 1: Le "Builder" - Met en place l'environnement et compile l'application.
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS builder

# Passage en PowerShell pour des scripts plus robustes.
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Installation de Chocolatey (gestionnaire de paquets pour Windows).
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Installation de Git et Flutter.
RUN choco install git -y
RUN choco install flutter -y

# Installation directe des outils de build C++ de Visual Studio pour plus de fiabilité.
# 1. Téléchargement de l'installateur officiel.
ADD https://aka.ms/vs/17/release/vs_BuildTools.exe C:/vs_BuildTools.exe

# 2. Exécution de l'installateur avec les composants requis pour Flutter.
#    La syntaxe est maintenant compatible avec PowerShell.
RUN C:/vs_BuildTools.exe --quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended; if ($LastExitCode -ne 0 -and $LastExitCode -ne 3010) { exit $LastExitCode }

# 3. Nettoyage de l'installateur.
RUN del C:/vs_BuildTools.exe

# --- CORRECTION ---
# On appelle directement flutter via son chemin d'installation correct par Chocolatey.
RUN C:\tools\flutter\bin\flutter.bat config --enable-windows-desktop

# Création du répertoire de travail pour l'application.
WORKDIR C:\\app

# Copie des fichiers de configuration.
COPY pubspec.yaml pubspec.lock ./

# Installation des dépendances Flutter en utilisant le chemin absolu.
RUN C:\tools\flutter\bin\flutter.bat pub get

# Copie du reste du code source de l'application.
COPY . .

# Définition des arguments de build pour les URLs et le mode de production.
ARG PRODUCTION="true"
ARG BASE_URL="https://plop.quickcontest.com"
ARG WEBSOCKET_URL="wss://wss.plop.quickcontest.com"

# Copie du bon fichier d'environnement (.env) en fonction de l'argument PRODUCTION.
RUN If ($env:PRODUCTION -eq "true" ) { Copy-Item -Path .env.prod -Destination .env} Else { Copy-Item -Path .env.dev -Destination .env}

# Nettoyage et compilation de l'application en mode release en utilisant les chemins absolus.
RUN C:\tools\flutter\bin\flutter.bat clean
RUN C:\tools\flutter\bin\flutter.bat build windows --release --dart-define=BASE_URL=$env:BASE_URL --dart-define=WEBSOCKET_URL=$env:WEBSOCKET_URL

# ---
# Stage 2: L'image finale - Contient uniquement l'application compilée.
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Création d'un répertoire pour l'application dans l'image finale.
WORKDIR C:\\App

# Copie UNIQUEMENT du dossier de la release compilée depuis le stage "builder".
COPY --from=builder C:\\app\\build\\windows\\runner\\Release .

# La commande par défaut pour simplement garder le conteneur en vie.
CMD ["cmd"]

