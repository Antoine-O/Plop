# Stage 1: Le "Builder" - Met en place l'environnement et compile l'application.
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS builder

# Passage en PowerShell pour des scripts plus robustes.
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Installation de Chocolatey (gestionnaire de paquets pour Windows).
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Installation des dépendances essentielles : Git, Flutter, et les outils de build C++ de Visual Studio.
RUN choco install git -y
RUN choco install flutter -y
# L'installation des outils de build C++ est INDISPENSABLE pour Flutter sur Windows.
RUN choco install visualstudio2022-buildtools -y --package-parameters "--add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended"

# Ajout de Flutter au PATH de l'environnement.
ENV PATH="C:\\ProgramData\\chocolatey\\bin;C:\\ProgramData\\chocolatey\\lib\\flutter\\tools\\flutter\\bin;${env:PATH}"

# CORRECTION : On rafraîchit l'environnement et on active le support Windows dans la MÊME commande.
# L'opérateur '&&' garantit que la seconde commande s'exécute dans le même contexte que la première.
RUN refreshenv && flutter config --enable-windows-desktop

# Création du répertoire de travail pour l'application.
WORKDIR C:\\app

# Copie des fichiers de configuration.
COPY pubspec.yaml pubspec.lock ./

# Installation des dépendances Flutter.
RUN flutter pub get

# Copie du reste du code source de l'application.
COPY . .

# Définition des arguments de build pour les URLs et le mode de production.
ARG PRODUCTION="true"
ARG BASE_URL="https://default.api.com"
ARG WEBSOCKET_URL="wss://default.websocket.com"

# Copie du bon fichier d'environnement (.env) en fonction de l'argument PRODUCTION.
RUN If ($env:PRODUCTION -eq "true" ) { Copy-Item -Path .env.prod -Destination .env} Else { Copy-Item -Path .env.dev -Destination .env}

# Nettoyage et compilation de l'application en mode release.
RUN flutter clean
RUN flutter build windows --release --dart-define=BASE_URL=$env:BASE_URL --dart-define=WEBSOCKET_URL=$env:WEBSOCKET_URL

# ---
# Stage 2: L'image finale - Contient uniquement l'application compilée.
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Création d'un répertoire pour l'application dans l'image finale.
WORKDIR C:\\App

# Copie UNIQUEMENT du dossier de la release compilée depuis le stage "builder".
# Cela permet de garder une image finale très légère.
COPY --from=builder C:\\app\\build\\windows\\runner\\Release .

# La commande par défaut pour simplement garder le conteneur en vie.
CMD ["cmd"]
