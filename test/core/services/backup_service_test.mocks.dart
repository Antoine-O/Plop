// Mocks generated by Mockito 5.4.4 from annotations
// in plop/test/core/services/backup_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i12;
import 'dart:ui' as _i7;

import 'package:file_picker/src/file_picker.dart' as _i10;
import 'package:file_picker/src/file_picker_result.dart' as _i11;
import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:plop/core/models/contact_model.dart' as _i6;
import 'package:plop/core/models/message_model.dart' as _i9;
import 'package:plop/core/services/database_service.dart' as _i8;
import 'package:plop/core/services/user_service.dart' as _i3;
import 'package:shared_preferences/shared_preferences.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set username(String? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isGlobalMute => (super.noSuchMethod(
        Invocation.getter(#isGlobalMute),
        returnValue: false,
      ) as bool);

  @override
  set isGlobalMute(bool? _isGlobalMute) => super.noSuchMethod(
        Invocation.setter(
          #isGlobalMute,
          _isGlobalMute,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> init({_i5.SharedPreferences? prefs}) => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
          {#prefs: prefs},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool hasUser() => (super.noSuchMethod(
        Invocation.method(
          #hasUser,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> createUser(String? newUsername) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [newUsername],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> updateUsername(
    String? newUsername, {
    _i5.SharedPreferences? prefs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUsername,
          [newUsername],
          {#prefs: prefs},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserId(String? newUserId) => (super.noSuchMethod(
        Invocation.method(
          #updateUserId,
          [newUserId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleGlobalMute({_i5.SharedPreferences? prefs}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleGlobalMute,
          [],
          {#prefs: prefs},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> syncContactsPseudos(List<_i6.Contact>? localContacts) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncContactsPseudos,
          [localContacts],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i8.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<_i6.Contact> get contactsBox => (super.noSuchMethod(
        Invocation.getter(#contactsBox),
        returnValue: _FakeBox_0<_i6.Contact>(
          this,
          Invocation.getter(#contactsBox),
        ),
      ) as _i2.Box<_i6.Contact>);

  @override
  _i2.Box<_i9.MessageModel> get messagesBox => (super.noSuchMethod(
        Invocation.getter(#messagesBox),
        returnValue: _FakeBox_0<_i9.MessageModel>(
          this,
          Invocation.getter(#messagesBox),
        ),
      ) as _i2.Box<_i9.MessageModel>);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addContact(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #addContact,
          [contact],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i6.Contact? getContact(String? userId) =>
      (super.noSuchMethod(Invocation.method(
        #getContact,
        [userId],
      )) as _i6.Contact?);

  @override
  _i4.Future<List<_i6.Contact>> getAllContactsOrdered() => (super.noSuchMethod(
        Invocation.method(
          #getAllContactsOrdered,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Contact>>.value(<_i6.Contact>[]),
      ) as _i4.Future<List<_i6.Contact>>);

  @override
  _i4.Future<List<String>> getContactsOrder() => (super.noSuchMethod(
        Invocation.method(
          #getContactsOrder,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> updateContact(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #updateContact,
          [contact],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteContact(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveContactOrder(List<String>? orderedUserIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveContactOrder,
          [orderedUserIds],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addMessage(_i9.MessageModel? message) => (super.noSuchMethod(
        Invocation.method(
          #addMessage,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i9.MessageModel> getAllMessages() => (super.noSuchMethod(
        Invocation.method(
          #getAllMessages,
          [],
        ),
        returnValue: <_i9.MessageModel>[],
      ) as List<_i9.MessageModel>);

  @override
  _i4.Future<void> deleteMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [messageId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> replaceAllContacts(List<_i6.Contact>? newContacts) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceAllContacts,
          [newContacts],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> mergeContacts(List<_i6.Contact>? newContacts) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeContacts,
          [newContacts],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> replaceAllMessages(List<_i9.MessageModel>? newMessages) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceAllMessages,
          [newMessages],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> mergeMessages(List<_i9.MessageModel>? newMessages) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeMessages,
          [newMessages],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clearContacts() => (super.noSuchMethod(
        Invocation.method(
          #clearContacts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setContactOrder(List<String>? order) => (super.noSuchMethod(
        Invocation.method(
          #setContactOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearMessages() => (super.noSuchMethod(
        Invocation.method(
          #clearMessages,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FilePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePicker extends _i1.Mock implements _i10.FilePicker {
  MockFilePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i11.FilePickerResult?> pickFiles({
    String? dialogTitle,
    String? initialDirectory,
    _i10.FileType? type = _i10.FileType.any,
    List<String>? allowedExtensions,
    dynamic Function(_i10.FilePickerStatus)? onFileLoading,
    bool? allowCompression = false,
    int? compressionQuality = 0,
    bool? allowMultiple = false,
    bool? withData = false,
    bool? withReadStream = false,
    bool? lockParentWindow = false,
    bool? readSequential = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFiles,
          [],
          {
            #dialogTitle: dialogTitle,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #onFileLoading: onFileLoading,
            #allowCompression: allowCompression,
            #compressionQuality: compressionQuality,
            #allowMultiple: allowMultiple,
            #withData: withData,
            #withReadStream: withReadStream,
            #lockParentWindow: lockParentWindow,
            #readSequential: readSequential,
          },
        ),
        returnValue: _i4.Future<_i11.FilePickerResult?>.value(),
      ) as _i4.Future<_i11.FilePickerResult?>);

  @override
  _i4.Future<List<String>?> pickFileAndDirectoryPaths({
    String? initialDirectory,
    _i10.FileType? type = _i10.FileType.any,
    List<String>? allowedExtensions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFileAndDirectoryPaths,
          [],
          {
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
          },
        ),
        returnValue: _i4.Future<List<String>?>.value(),
      ) as _i4.Future<List<String>?>);

  @override
  _i4.Future<bool?> clearTemporaryFiles() => (super.noSuchMethod(
        Invocation.method(
          #clearTemporaryFiles,
          [],
        ),
        returnValue: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);

  @override
  _i4.Future<String?> getDirectoryPath({
    String? dialogTitle,
    bool? lockParentWindow = false,
    String? initialDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectoryPath,
          [],
          {
            #dialogTitle: dialogTitle,
            #lockParentWindow: lockParentWindow,
            #initialDirectory: initialDirectory,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> saveFile({
    String? dialogTitle,
    String? fileName,
    String? initialDirectory,
    _i10.FileType? type = _i10.FileType.any,
    List<String>? allowedExtensions,
    _i12.Uint8List? bytes,
    bool? lockParentWindow = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #dialogTitle: dialogTitle,
            #fileName: fileName,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #bytes: bytes,
            #lockParentWindow: lockParentWindow,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i5.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i4.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
