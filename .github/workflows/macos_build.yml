# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Build & Release macOS App

# Déclencheurs du workflow
on:
  # Se lance à chaque push sur la branche "main" ou "master"
  push:
    branches:
      - main
      - master
  # Permet de lancer manuellement le workflow depuis l'interface de GitHub
  workflow_dispatch:

jobs:
  build-and-release-macos:
    # Nom du job
    name: Build and Release for macOS
    # IMPORTANT: Utilise la dernière machine virtuelle macOS disponible
    runs-on: macos-latest

    # Ajout de ce bloc pour donner au workflow la permission de créer une Release.
    permissions:
      contents: write

    env:
      # ATTENTION: Remplacez les URLs ci-dessous par vos véritables URLs de production.
      BASE_URL: "https://ws.plop.quickcontest.com"
      WEBSOCKET_URL: "wss://ws.plop.quickcontest.com"

    steps:
      # 1. Récupération du code source de votre projet
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update Version
        run : |
          sed -i '' -E  "s/^(version: [0-9]+\.[0-9]+\.).*$/\\1${{ github.run_number }}/" pubspec.yaml
        shell: bash
      - name: Set Firebase Settings
        run : |
          mv lib/firebase_options.template.dart  lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_API_KEY_WEB___/${{ secrets.FIREBASE_API_KEY_WEB }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_APP_ID_WEB___/${{ secrets.FIREBASE_APP_ID_WEB }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_API_KEY_ANDROID___/${{ secrets.FIREBASE_API_KEY_ANDROID }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_APP_ID_ANDROID___/${{ secrets.FIREBASE_APP_ID_ANDROID }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_API_KEY_IOS___/${{ secrets.FIREBASE_API_KEY_IOS }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_APP_ID_IOS___/${{ secrets.FIREBASE_APP_ID_IOS }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_API_KEY_WINDOWS___/${{ secrets.FIREBASE_API_KEY_WINDOWS }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_APP_ID_WINDOWS___/${{ secrets.FIREBASE_APP_ID_WINDOWS }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_PROJECT_ID___/${{ secrets.FIREBASE_PROJECT_ID }}/g" lib/firebase_options.dart
          sed -i '' -E "s/___FIREBASE_MESSAGING_SENDER_ID___/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g" lib/firebase_options.dart
        shell: bash

      # 2. Installation et configuration de Flutter
      # Utilise une action standard pour installer le SDK Flutter sur la machine virtuelle.
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # ou 'beta', 'dev'
      
      # 3. Installation des dépendances (UNE SEULE FOIS)
      # Cette étape génère tous les fichiers nécessaires pour les plateformes natives.
      - name: Get Flutter dependencies
        run: flutter pub get
    # 4. (NOUVEAU) Étape de débogage pour lister les fichiers
      - name: List files for debugging
        run: ls -laR
        shell: bash

      # 4. Compilation de l'application pour macOS
      - name: Build macOS application
        run: |
          flutter build macos --release \
            --dart-define=BASE_URL=${{ env.BASE_URL }} \
            --dart-define=WEBSOCKET_URL=${{ env.WEBSOCKET_URL }}


      # 6. Compression de l'application (.app) en une archive .zip
      # Le résultat du build est un dossier .app, nous le compressons pour la distribution.
      - name: Zip the .app bundle
        # Remplacez "plop.app" par le nom de votre application si différent.
        # Le nom se trouve dans votre pubspec.yaml (name: plop)
        run: |
          ditto -c -k --sequesterRsrc --keepParent \
            build/macos/Build/Products/Release/plop.app \
            plop-macos-release.zip

      # 7. Publication du .zip dans une Release GitHub
      # Crée ou met à jour une release avec l'archive compressée.
      - name: Create GitHub Release and Upload Zip
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-build
          name: Latest Build
          prerelease: true
          files: plop-macos-release.zip
