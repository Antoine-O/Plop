# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Build & Release Android APK

# Déclencheurs du workflow
on:
  # Se lance à chaque push sur la branche "main" ou "master"
  push:
    branches:
      - main
      - master
  # Permet de lancer manuellement le workflow depuis l'interface de GitHub
  workflow_dispatch:

jobs:
  build-and-release:
    # Nom du job
    name: Build and Release APK
    # Utilise la dernière version d'Ubuntu disponible sur GitHub Actions
    runs-on: ubuntu-latest
    # Ajout de ce bloc pour donner au workflow la permission de créer une Release.
    permissions:
      contents: write
    env:
      # --- MODIFICATION ---
      # ATTENTION: Remplacez l'URL ci-dessous par votre véritable URL d'API de production.
      BASE_URL: "https://ws.plop.quickcontest.com"
      WEBSOCKET_URL: "wss://ws.plop.quickcontest.com"

    steps:
      # 1. Récupération du code source
      # Cette action télécharge le code de votre dépôt sur la machine virtuelle
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update Version
        run : |
          sed -E  -i "s/^(version: [0-9]+\.[0-9]+\.).*$/\\1${{ github.run_number }}/" pubspec.yaml
        shell: bash
      - name: Set Firebase Settings
        run : |
          mv lib/firebase_options.template.dart  lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_API_KEY_WEB___/${{ secrets.FIREBASE_API_KEY_WEB }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_APP_ID_WEB___/${{ secrets.FIREBASE_APP_ID_WEB }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_API_KEY_ANDROID___/${{ secrets.FIREBASE_API_KEY_ANDROID }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_APP_ID_ANDROID___/${{ secrets.FIREBASE_APP_ID_ANDROID }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_API_KEY_IOS___/${{ secrets.FIREBASE_API_KEY_IOS }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_APP_ID_IOS___/${{ secrets.FIREBASE_APP_ID_IOS }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_API_KEY_WINDOWS___/${{ secrets.FIREBASE_API_KEY_WINDOWS }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_APP_ID_WINDOWS___/${{ secrets.FIREBASE_APP_ID_WINDOWS }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_PROJECT_ID___/${{ secrets.FIREBASE_PROJECT_ID }}/g" lib/firebase_options.dart
          sed -i -e "s/___FIREBASE_MESSAGING_SENDER_ID___/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g" lib/firebase_options.dart
          mv /android/app/google-services.template.json  /android/app/google-services.json
          sed -i -e "s/___FIREBASE_API_KEY_ANDROID___/${{ secrets.FIREBASE_API_KEY_ANDROID }}/g" /android/app/google-services.json
          sed -i -e "s/___FIREBASE_APP_ID_ANDROID___/${{ secrets.FIREBASE_APP_ID_ANDROID }}/g" /android/app/google-services.json
          sed -i -e "s/___FIREBASE_PROJECT_ID___/${{ secrets.FIREBASE_PROJECT_ID }}/g" /android/app/google-services.json
          sed -i -e "s/___FIREBASE_MESSAGING_SENDER_ID___/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g" /android/app/google-services.json

        shell: bash


      # 2. Construction de l'image Docker
      # Utilise votre Dockerfile pour compiler l'application Flutter.
      - name: Build Docker image
        run: |
          docker build . \
            --file Dockerfile.android \
            --tag flutter-app-builder:latest \
            --build-arg PRODUCTION=true \
            --build-arg BASE_URL=${{ secrets.API_URL }} \
            --build-arg WEBSOCKET_URL=${{ secrets.API_URL }}\
            --build-arg SUBVERSION=${{ github.run_number }}

      # 3. Création d'un dossier pour l'APK
      # Prépare un dossier local pour y copier l'APK depuis l'image Docker.
      - name: Create build directory
        run: mkdir -p build/apk

      # 4. Extraction de l'APK depuis l'image Docker
      # Crée un conteneur temporaire à partir de l'image construite et copie l'APK généré.
      - name: Extract APK from Docker image
        run: |
          docker create --name extractor flutter-app-builder:latest
          # Le Dockerfile copie l'APK dans /app, qui contient app-release.apk
          docker cp extractor:/app/app-release.apk ./build/apk/plop-release.apk
          docker rm extractor

      # 5. Publication de l'APK dans une Release GitHub
      # Utilise une action populaire pour créer une "Release" sur GitHub.
      # Si la release "Latest Build" existe, elle sera mise à jour. Sinon, elle sera créée.
      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v2
        with:
          # Le nom du tag pour la release. 'latest' est une convention pour la dernière build.
          tag_name: latest-build
          # Le titre de la release.
          name: Latest Android Build
          # Permet à l'action de supprimer et de recréer la release à chaque fois,
          # pour toujours avoir la dernière version.
          prerelease: true
          # Les fichiers à joindre à la release.
          files: ./build/apk/plop-release.apk
