# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Build & Release Windows App

# Déclencheurs du workflow
on:
  # Se lance à chaque push sur la branche "main" ou "master"
  push:
    branches:
      - main
      - master
  # Permet de lancer manuellement le workflow depuis l'interface de GitHub
  workflow_dispatch:

jobs:
  build-and-release-windows:
    # Nom du job
    name: Build and Release for Windows
    # Utilise une machine virtuelle Windows, qui inclut déjà Visual Studio.
    runs-on: windows-latest

    # Donne la permission au workflow de créer une Release
    permissions:
      contents: write

    env:
      # ATTENTION: Remplacez les URLs ci-dessous par vos véritables URLs de production.
      BASE_URL: "https://ws.plop.quickcontest.com"
      WEBSOCKET_URL: "wss://ws.plop.quickcontest.com"

    steps:
      # 1. Récupération du code source
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update Version
        run : |
          (Get-Content -Path pubspec.yaml -Raw) -replace  '^(version: [0-9]+\.[0-9]+\.).*', "`$1${{ github.run_number }}" | Set-Content -Path pubspec.yaml
        shell: pwsh
      # 2. Installation de Flutter sur la machine virtuelle
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Activation du support pour le bureau Windows
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      # 4. Téléchargement des dépendances du projet
      - name: Get Flutter dependencies
        run: flutter pub get

      # 5. Compilation de l'application Windows
      # Le runner 'windows-latest' a déjà les outils de build Visual Studio nécessaires.
      - name: Build Windows application
        run: |
          flutter build windows --release `
            --dart-define=BASE_URL=${{ env.BASE_URL }} `
            --dart-define=WEBSOCKET_URL=${{ env.WEBSOCKET_URL }}

      # 6. Compression du dossier de la release en .zip
      # Le résultat du build est un dossier complet, on le compresse pour la distribution.
      - name: Zip Release folder
        run: powershell Compress-Archive -Path ./build/windows/x64/runner/Release/* -DestinationPath ./plop-windows-release.zip

      # 7. Publication du .zip dans une Release GitHub
      - name: Create GitHub Release and Upload Zip
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-build
          name: Latest Windows Build
          prerelease: true
          files: ./plop-windows-release.zip

